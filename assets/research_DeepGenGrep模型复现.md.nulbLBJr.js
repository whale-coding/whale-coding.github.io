import{_ as T,c as G,o as C,ah as e}from"./chunks/framework.D6otvB2a.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"research/DeepGenGrep模型复现.md","filePath":"research/DeepGenGrep模型复现.md","lastUpdated":1744982718000}'),s={name:"research/DeepGenGrep模型复现.md"};function n(a,A,p,i,t,l){return C(),G("div",null,A[0]||(A[0]=[e(`<p>1、模型训练</p><p>原readme描述如下：</p><p>-----------------------train model----------------------------------------------------------------------------------</p><p>Train DeepGenGrep on human genome for TIS recognition as follows:</p><p>python DeepGenGrep.py -gsr TIS -org hs -len 600</p><p>Train DeepGenGrep on human genome for the recognition of PAS AATAAA signal as follows:</p><p>python DeepGenGrep.py -gsr PAS_AATAAA -org hs -len 600</p><p>Parameters and description are as follows: --gsr: genome signal region (TIS, PAS, PAS_AATAAA, Splice_acc, Splice_don) -org: organism name, hs (human), mm (mouse), bt (bovine), dm (Drosophila melanogaster) -len: the length of input sequence</p><p>The input dataset was first randomly split into the benchmark (75%) and independent test (25%) datasets. Then, the benchmark dataset was further divided into the training and validation datasets with a ratio of 8:2.</p><p>Trained model is saved in the ‘Model’ fold, and the evaluated results is saved in ‘Results’ fold. Please do not change the directory including &#39;data&#39;, &#39;Model&#39;, and &#39;Results&#39; in the project.</p><p>这里我们只关心训练PAS的。</p><p>使用的虚拟环境是tf2环境。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python DeepGenGrep.py </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsr </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PAS_AATAAA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org hs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 600</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>模型训练结束，会在Model/PAS_AATAAA/hs_bestModel.weights.h5生成模型权重文件。</p><p>以及会在Results/PAS_AATAAA/hs_TrainingResults.txt，生成模型评估结果文件。</p><p>解析：①读取文件，首先从Data/PAS_AATAAA/目录下读取hs_pos_PAS_AATAAA.txt和hs_neg_PAS_AATAAA.txt文件，即正负样本数据。</p><p>正负样本文件是类似这样的：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>AGTGTTTGGTAGCACAATAGGGTGACTGTAGTTAATAATTTCTTATATATTTCAAAATAACAAAGAGTGGAATTGGAATATCCCTAATGCAAAAAATGATAAATGCCTCAGGTGGTGGATCATCCACTTACCCCAATTTGACCACTACACATTATATGCTTGTATCAAAATATCACATGCACCCCATAAATGTATACAATTATTGTGTATCCACAATAATTAAAAATAAAATGTCTTAAGTTTTTTAAAAGAAAAAGAACATAAAATATTTCAAAGAAAAAATGGTATAGCTAATTTAAGTTAAAGAACTAAAAGAATTCATTTTTAATGGCTTTGTCTGTAATCGAATTGAAATATACATAATGATATTGTGGGAATCAATGCTAAGTACTGACTATTGTTAACCATTTTTCATCTATGATTTTTCTTCCTATAACCATGTCCTCAGGTCCTGAGTTCTCAGGTAGAATGTAGCCTTACTAAGAGAAAAAAAATAAGCCATCACACTTCTTATAGAACCTGACCTAATGTCCTGAAAAAATGCCTTTGATTAATAATTAATAAACAATCTCTTTTAAAAAATCAAGGTCTTTTTTTCTA</span></span>
<span class="line"><span>ATGAATATTTCTGTACAAATATCTCTTTGATTTTCTGCTTTCAATCCTTTTGAGTATATACCCAGAAGAGGAATTGATGGATTATACATAATTCTGTGTTTACATTCTTGAGGAATCATCATAAAATAATAACTTATTATTAACAAGAATTAGACCACCTGAGAAACATACACTATAATATTAAAAGAGGTTAAAAGAAAGATAACATTTTAAAAAACTCTTCACTTAATGTTCTTTTGGCAAAAGAGAATTGTAACTAAATATTATAGAAGAAATTTAAAAGGAAGAATAAAGCACTTTGGAAGATTATAAAGTAGACATGCAAGAACACAGAGTAGATAAGGCACAAGAAAGATGAAAATAAAATATGAGTTTATAAATTGAAAGATAGCATCTTATATCAAAAATAATTGATCCATAATTGTAAAAACAGAAACAAATCTTATTACTTTTTATGGAACTTTGAAAATAATGAAAAAATATTTGCACCTCTTCTTAGGTAAAACAAATCTAAGTAATTTATAAGTAGCATGATAACAATATATCAAAATTTCATGGAAAAGTTTTAGTACATAAATGTCTAAAATTAATATAAATTAT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>需要注意:</p><p>DeepGSR模型中的输入的序列文件，每个样本是601bp，并且最后一个碱基统一是N。是将PAS及其上下游各300bp序列组成的606个碱基序列，进行处理，不要PAS那6个碱基，只要600个碱基（上下游各300）最后加上标签碱基N/P,其中N表示负样本，P表示正样本。</p><p>但是在DeepGenGerp模型中，只需要600bp的序列，不需要最后的标签碱基N/P,这里需要注意将标签碱基去除之后在DeepGenGerp模型中使用。</p><p>注意：每次训练的时候记得把Data/PAS_AATAAA/process/目录下的数据给清空！！！否则会直接读取这个目录下的数据，而不是对原始数据进行处理！！！。</p><p>之后会将其保存为Data/PAS_AATAAA/process/hs_x.npy以及Data/PAS_AATAAA/process/hs_y.npy文件。输入数据集首先被随机分为基准（75%）和独立测试（25%）数据集。然后，以8:2的比例将基准数据集进一步划分为训练和验证数据集。</p><p>会生成Data/PAS_AATAAA/process/hs_x_test.npy和Data/PAS_AATAAA/process/hs_y_test.npy独立测试数据集。</p><p>再之后读取模型进行训练以及验证、测试。</p><p>2、模型预测</p><p>原readme描述如下：</p><p>---------------------Predciton-----------------------------------------------------------------------------------</p><p>When we train the model on TIS and PAS signals, each sequence consists of 300 upstream nucleotides, the considered signal variant and 300 downstream nucleotides. As a result, each PAS sequence has 606 nucleotides, while each TIS sequence has 603 nucleotides. For the splice site training dataset, the length of each sequence is 398-nt. When we predict TIS and PAS signals in test sequences. The length of input sequences is also 603 and 606 for prediction of TIS and PAS, respectively. If the length of sequences is less than 603 (for TIS) and 606 (for PAS), these sequences would be filtered out. If the length of sequences is more than 603 (for TIS) and 606 (for PAS), the model would cut long sequences into multiply overlap sequences with 603bp (for TIS) or 606 bp (for PAS).</p><p>The common line of prediction is as follows:</p><p>python prediction.py -gsr -TIS -org hs, -input test.fasta -out out</p><p>实际预测命令是像下面这样的：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>python prediction.py -gsr PAS_AATAAA -org hs -input input.fasta -out out</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意点1：需要提前将输出结果目录out创建出来</p><p>注意点2：输入的序列需要是606bp的序列，像下面这样</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt;chr1_+_100082792_100082797_AAACAT</span></span>
<span class="line"><span>AACTTCTTAGATATTAGCAAATGTCTCTGCTACCATTTCCTTAAGGTGTTGAGCTTTAACTCTATGCTGACTCAGTGAGACACAGTAGGTAGTATGGTTGTGGACCTATTTGTTTTAACATTGTAAAATTTTGAGTCAGATTTTAATATTGTAAAATCTTGGGTCAAATAATTCAAAGCCTTAATGCAGATGCACTAAAACAAAGAAATGGTAAATGAATTGTTTGCATTTAAAAAAAAAAACTCTTAAGAAAACTGTACTAAATCTGAATCATGTTTTGAGCTTGTTTGCAGTACTTTTAAACATTATTCACTACTGTTTTTGAAGTGAGAAAGTATCAGCCATTTAGCATTTAAGTTGGGGTATTTAGAGCCTGTAATCTAAATGCTGGCTCAAATTTATTCCCCAGCTACTTCTTATACCACTATTCTTTTAATGTTTGCATAATCATAAGCACCTCAACACTTGAATACATAATCTAAAAATTATATAGTAAAGCTGGTAGCCTTGAAAATGTCAGTGTGATATCTATTATGTAGATAAATATATATAGTGGCCTTTCAGGACTGTCACAGTAACACTTTATTTACAGAGCTAATGTTTGTC</span></span>
<span class="line"><span>&gt;chr1_+_100148206_100148211_AAACAT</span></span>
<span class="line"><span>GATGTTTGGTTGAAACCTATGCTGCCAGTTTTGAGGAAAGGAATGAAGAACCTTTAGCCAAACGCATAAAGAATGATAAAACAGAAAAAGAAATTTACACTTTGGCCAAGGAAGGAAATGAAAAAAATGTCCCAGAGAAGTGGAACCCTGTGGCTGGCATTGTTATTGCACTCTGTTGTCACCACAGGTGTGATTGGAGACATTATGTGGGCAAAGAATATTTCAGGGCTCTAGGCCTTGGAGCAGTGGAATTCCATTATTTCCAGCGAATGAGTAGTTGGGCAACTTGTGGGATGCGGAAAACATCTTTGGAAACCTCAAATAGTACCACAAAGAGGCAAGATAATCAGAATGATGATAGTGAAGAGCATGATGATGGAGGATACAGAATCACAGATGATGGCGCTGATTGTTTGCCTGGGTAAGAGACTACTTTTGTAATGCATGATACTAAAGGAGAAATATTATATTGTACTGTACTTTAGATGACTATTATCAACAATTCATGAAAATGTATTTTATAATCTAATTTTAGAATAAGCTAAAATATACACATCTTTTATTGTGGTCATAAATATAATGTGTCTTGGAAGCATGGGACAAAGT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>输出结果是类似这样的</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>,Organism,Sequence ID,Sequence,Is PAS_AATAAA contained?,The probability</span></span>
<span class="line"><span>0,hs,&gt;chr1_+_100082792_100082797_AAACAT,AACTTCTTAGATATTAGCAAATGTCTCTGCTACCATTTCCTTAAGGTGTTGAGCTTTAACTCTATGCTGACTCAGTGAGACACAGTAGGTAGTATGGTTGTGGACCTATTTGTTTTAACATTGTAAAATTTTGAGTCAGATTTTAATATTGTAAAATCTTGGGTCAAATAATTCAAAGCCTTAATGCAGATGCACTAAAACAAAGAAATGGTAAATGAATTGTTTGCATTTAAAAAAAAAAACTCTTAAGAAAACTGTACTAAATCTGAATCATGTTTTGAGCTTGTTTGCAGTACTTTTTATTCACTACTGTTTTTGAAGTGAGAAAGTATCAGCCATTTAGCATTTAAGTTGGGGTATTTAGAGCCTGTAATCTAAATGCTGGCTCAAATTTATTCCCCAGCTACTTCTTATACCACTATTCTTTTAATGTTTGCATAATCATAAGCACCTCAACACTTGAATACATAATCTAAAAATTATATAGTAAAGCTGGTAGCCTTGAAAATGTCAGTGTGATATCTATTATGTAGATAAATATATATAGTGGCCTTTCAGGACTGTCACAGTAACACTTTATTTACAGAGCTAATGTTTGTC,Yes,52.78%</span></span>
<span class="line"><span>1,hs,&gt;chr1_+_100148206_100148211_AAACAT,GATGTTTGGTTGAAACCTATGCTGCCAGTTTTGAGGAAAGGAATGAAGAACCTTTAGCCAAACGCATAAAGAATGATAAAACAGAAAAAGAAATTTACACTTTGGCCAAGGAAGGAAATGAAAAAAATGTCCCAGAGAAGTGGAACCCTGTGGCTGGCATTGTTATTGCACTCTGTTGTCACCACAGGTGTGATTGGAGACATTATGTGGGCAAAGAATATTTCAGGGCTCTAGGCCTTGGAGCAGTGGAATTCCATTATTTCCAGCGAATGAGTAGTTGGGCAACTTGTGGGATGCGGACTTTGGAAACCTCAAATAGTACCACAAAGAGGCAAGATAATCAGAATGATGATAGTGAAGAGCATGATGATGGAGGATACAGAATCACAGATGATGGCGCTGATTGTTTGCCTGGGTAAGAGACTACTTTTGTAATGCATGATACTAAAGGAGAAATATTATATTGTACTGTACTTTAGATGACTATTATCAACAATTCATGAAAATGTATTTTATAATCTAATTTTAGAATAAGCTAAAATATACACATCTTTTATTGTGGTCATAAATATAATGTGTCTTGGAAGCATGGGACAAAGT,Yes,53.24%</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>会在你上面指定的输出目录out生成prediction_result.csv模型预测结果文件。</p><p>3、实验结果。</p><p>DeepGenGrep原文中仅仅针对PAS（AATAAA）以及PAS（all）做了与DeepGSR的对比实验。（这里只展示Acc）</p><p>DeepGSR-PAS(AATAAA) DeepGenGrep(AATAAA) 自己的实验结果</p><p>86.94 86.84 87.54</p><p>DeepGSR-PAS(all) DeepGenGrep(all) 自己的实验结果</p><p>83.71 86.39 86.27</p><p>从上面的结果可以看到，基本与原文中的性能是差不多。</p><p>其他实验代码</p><p>（1）在PAS_noAATAAA数据上实验。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python DeepGenGrep.py </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gsr </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PAS_noAATAAA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org hs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 600</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://picgo-typora-images.oss-cn-beijing.aliyuncs.com/img/202504182038705.png" alt="image-20241229203417723"></p>`,50)]))}const h=T(s,[["render",n]]);export{o as __pageData,h as default};
